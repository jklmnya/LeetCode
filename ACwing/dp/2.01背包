/**
 * Dp, 0/1背包
 * f[i][j]代表从前i件物品选出重量不超过j的物品的价值的最大值
 * f[i][j] = max(f[i - 1][j], f[i - 1][j - vi] + wi) 不选第i件商品和选第i件商品
 **/ 
 
#include <iostream>
#include <algorithm>

using namespace std;

const int N = 1010;

int n, m;

int w[N], v[N], f[N][N];

int main() {
    cin >> n >> m;
    for (int i = 1;i<=n;i++) {
        cin >> w[i] >> v[i];
    }
    for (int i = 1;i<=n;i++) {
        for (int j = 0;j<=m;j++) {
            // 当前背包空间不足以放第i件物品
            f[i][j] = f[i - 1][j];
            // 当前背包空间可以存放第i件物品
            if (j >= w[i]) {
                f[i][j] = max(f[i][j], f[i - 1][j - w[i]] + v[i]);
            }
        }
    }
    cout << f[n][m] << endl;
    return 0;
}
